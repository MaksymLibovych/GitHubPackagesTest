name: Publish NuGet Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET 
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release

    - name: Run Unit Tests
      run: dotnet test --no-build --configuration Release

    - name: Check for existing NuGet source
      id: check-source
      run: 
        dotnet nuget list source | grep "github" || echo "not-found"

    - name: Add GitHub Packages NuGet source if not present
      if: steps.check-source.outputs.source != 'github'
      run: 
        dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.actor }}/index.json"

    - name: Pack NuGet package
      run: dotnet pack --configuration Release

    - name: Publish to GitHub Packages
      run: dotnet nuget push "TestConsole/bin/Release/*.nupkg" --api-key ${{ secrets.PAT_KEY }} --source "github" --skip-duplicate

    - name: Create and Push Tag
      run: |
        git config user.email "makslibovich@gmail.com"
        git config user.name "${{ github.actor }}"
    
        echo "Checking if csproj file exists"
        ls TestConsole/TestConsole.csproj || exit 1
    
        cat TestConsole/TestConsole.csproj
    
        VERSION=$(grep '<Version>' TestConsole/TestConsole.csproj | sed -e 's/.*<Version>\(.*\)<\/Version>.*/\1/' | tr -d '[:space:]')
    
        echo "Extracted version: '$VERSION'"

        if git ls-remote --tags origin | grep "refs/tags/v$VERSION" > /dev/null; then
          echo "Tag v$VERSION already exists, deleting it..."
      
          git tag -d "v$VERSION" || echo "Tag v$VERSION not found locally, skipping local deletion."
      
          git push --delete origin "v$VERSION" || echo "Failed to delete tag v$VERSION on remote."
        fi

        git tag -a "v$VERSION" -m "Tag for NuGet package version $VERSION"
        git push origin "v$VERSION"

    - name: Install GitHub CLI
      run: sudo apt-get install gh -y

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=$(grep '<Version>' TestConsole/TestConsole.csproj | sed -e 's/.*<Version>\(.*\)<\/Version>.*/\1/' | tr -d '[:space:]')

        if gh release view "v$VERSION" > /dev/null 2>&1; then
          echo "Release for tag v$VERSION exists, deleting it..."
      
          gh release delete "v$VERSION" -y || echo "Failed to delete release v$VERSION."
        fi

        gh release create "v$VERSION" --title "Release v$VERSION" --notes "Automatically generated release for version v$VERSION"

        